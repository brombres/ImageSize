#================================================================================
# ImageSize.rogue
# April 29, 2021
#================================================================================
$define VERSION "2.3.1"
$define DATE    "February 17, 2023"

$requireRogue "2.0.11"

uses Console/CommandLineParser
uses Graphics
uses Graphics/BitmapIO
uses Geometry

try
  ImageSize( System.command_line_arguments )
catch (error:Error)
  local w = Console.width.or_smaller( 80 )
  Console.error.println "="*w
  Console.error.println "ERROR"
  Console.error.println error->String.word_wrapped(w-2).indented(2)
  Console.error.println "="*w
  System.exit 1
endTry

class ImageSize
  PROPERTIES
    input_filepaths = String[]
    commands        = Command[]
    output_command  : Command

    combine_op : String
    is_replace = false
    grid_size  : RealXY

  METHODS
    method init( args:String[] )
      local command = CommandLineParser().
      [
        #option( "--output=",  &alias="-o" )
        on_unknown( this=>show_usage )
      ].parse( System.command_line_arguments )

      if (command//args.is_empty)
        show_usage
        System.exit
      endIf

      commands.add( CmdPrintInfo() )

      local cur_bg = Color.BLACK

      local reader = command//args.to_list<<String>>.reader
      forEach (arg in reader)
        if (arg == "resize")
          commands.add( CmdResize(read_wxh_wx_xh("resize",reader)) )
        elseIf (arg == "bg")
          cur_bg = read_color( reader )
          commands.add( CmdSetBG(cur_bg) )
        elseIf (arg == "create")
          local size = read_wxh( "create", reader )
          input_filepaths.add( "create:$x$:$"(size.x->Int32,size.y->Int32,cur_bg.argb->String(&hex)) )
        elseIf (arg == "crop")
          commands.add( CmdCrop(read_wxh_wx_xh("crop",reader)) )
        elseIf (arg == "aspect-fill")
          commands.add( CmdAspect(read_wxh("aspect-fill",reader),&!fit) )
        elseIf (arg == "aspect-fit")
          commands.add( CmdAspect(read_wxh("aspect-fit",reader),&fit) )
        elseIf (arg == "reshape")
          commands.add( CmdReshape(read_wxh("reshape",reader),&!fit) )
        elseIf (arg == "anchor")
          commands.add( CmdSetAnchor(read_anchor_args(reader)) )
        elseIf (arg == "flip" or arg == "hflip")
          commands.add CmdFlip( &h )
        elseIf (arg == "as-alpha")
          commands.add CmdAsAlpha()
        elseIf (arg == "swap")
          local (a,b) = read_channels( reader )
          commands.add CmdSwap(a,b)
        elseIf (arg == "vflip")
          commands.add CmdFlip( &v )
        elseIf (arg == "rotate")
          if (reader.has_another)
            local dir = reader.read
            which (dir)
              case "cw":  commands.add( CmdRotate90(&cw) ); nextIteration
              case "ccw": commands.add( CmdRotate90(&ccw) ); nextIteration
              case "180": commands.add( CmdRotate180() ); nextIteration
            endWhich
          endIf
          error( "After 'rotate', expected one of: cw ccw 180." )
        elseIf (arg == "output")
          if (not reader.has_another) error( "Expected filepath or format after 'output'." )
          output_command = CmdSave( reader.read )
        elseIf (arg == "replace")
          output_command = CmdSaveReplace()
          is_replace = true
        elseIf (arg == "splice")
          combine_op = "splice"
          grid_size = read_splice_args( reader )
          if (grid_size.is_zero) error( "Grid size cannot be (0,0)." )
        elseIf (arg == "split")
          combine_op = "split"
          grid_size = read_wxh( "split", reader )
          if (grid_size.x < 1 or grid_size.y < 1) error( "'split' dimensions must be greater than zero." )
        elseIf (arg == "stack")
          combine_op = "stack"
        else
          input_filepaths.add( arg )
        endIf
      endForEach

      if (is_replace)
        if (combine_op) error( "'replace' cannot be used with '$'."(combine_op) )
      endIf

      if (not output_command)
        if  (commands.count > 1 or combine_op)
          if (combine_op and combine_op == "split")
            local total = grid_size.x->Int32 * grid_size.y->Int32
            local format = "0"
            forEach (pow in 1..6)
              if (total < 10^pow) escapeForEach
              format = "0" + format
            endForEach
            output_command = CmdSave( "{name}-{w}x{h}-{$}.{ext}"(format) )
          else
            output_command = CmdSave( "{name}-{w}x{h}.{ext}" )
          endIf
        endIf
      endIf

      local bitmaps = Bitmap[]
      local initial_sequence_number = CmdSave.sequence_number
      forEach (filepath in input_filepaths)
        Command.anchor_x = 0.5
        Command.anchor_y = 0.5

        local bitmap : Bitmap
        if (filepath.begins_with("create:"))
          local size = filepath.after_first(':').before_last(':').split('x')
          local color = filepath.after_last(':')->Int32(&base=16)
          if (size.count != 2) error( ''Syntax error in "$". 'create:WxH:AARRGGBB' expected.'' ); return
          bitmap = Bitmap( size[0]->Int32, size[1]->Int32 ).[ clear(color) ]
          bitmap.filepath = color->String(&hex)
        else
          bitmap = Bitmap( File(filepath) )
          if (not bitmap) error( ''Error loading "$".''(filepath) )
        endIf

        forEach (cmd in commands)
          bitmap = cmd( bitmap )
        endForEach

        if (combine_op)
          which (combine_op)
            case "split"
              CmdSave.sequence_number = initial_sequence_number
              split( bitmap )
            others
              bitmaps.add( bitmap )
          endWhich
        else
          if (output_command) output_command( bitmap )
        endIf
      endForEach

      if (combine_op)
        which (combine_op)
          case "splice"
            local bitmap = splice( bitmaps )
            output_command( bitmap )
          case "stack"
            local bitmap = stack( bitmaps )
            output_command( bitmap )
        endWhich
      endIf

    method set_combine_op( op:String )
      if (@combine_op)
        if (op == @combine_op)
          error "'$' cannot be used multiple times."(op)
        else
          error "'$' cannot be used with '$'."(op,@combine_op)
        endIf
      endIf
      @combine_op = op

    method splice( bitmaps:Bitmap[] )->Bitmap
      if (grid_size.y == 1)
        println "splice h"
        local max_height = 0
        max_height .= or_larger( (forEach in bitmaps).height )
        local cmd = CmdResize( RealXY(0,max_height), &quiet )
        forEach (bitmap at i in bitmaps)
          bitmaps[i] = cmd( bitmap )
        endForEach

        local total_w = 0
        total_w += (forEach in bitmaps).width
        local result = Bitmap( total_w, max_height ).[ filepath="ImageRow.png" ]
        local x = 0
        forEach (bitmap in bitmaps)
          bitmap.blit( result, x, 0 )
          x += bitmap.width
        endForEach
        return result

      elseIf (grid_size.x == 1)
        println "splice v"
        local max_width = 0
        max_width .= or_larger( (forEach in bitmaps).width )
        local cmd = CmdResize( RealXY(max_width,0), &quiet )
        forEach (bitmap at i in bitmaps)
          bitmaps[i] = cmd( bitmap )
        endForEach

        local total_h = 0
        total_h += (forEach in bitmaps).height
        local result = Bitmap( max_width, total_h ).[ filepath="ImageColumn.png" ]
        local y = 0
        forEach (bitmap in bitmaps)
          bitmap.blit( result, 0, y )
          y += bitmap.height
        endForEach
        return result

      else
        # Grid
        local w = grid_size.x->Int32
        local h = grid_size.y->Int32
        if (w == 0) w = (bitmaps.count + (h-1)) / h
        if (h == 0) h = (bitmaps.count + (w-1)) / w
        println "splice $x$" (w,h)

        loop (w*h - bitmaps.count)
          bitmaps.add( Bitmap(1,1,Color.BLACK) )
        endLoop

        local max_width = 0
        max_width .= or_larger( (forEach in bitmaps).width )
        local max_height = 0
        max_height .= or_larger( (forEach in bitmaps).height )
        local cmd = CmdReshape( RealXY(max_width,max_height), &fit, &quiet )
        forEach (bitmap at i in bitmaps)
          bitmaps[i] = cmd( bitmap )
        endForEach

        local result = Bitmap( max_width*w, max_height*h ).[ filepath="ImageTable.png" ]
        local iterator = bitmaps.iterator
        forEach (j in 0..<h)
          forEach (i in 0..<w)
            iterator.read.blit( result, i*max_width, j*max_height )
          endForEach
        endForEach

        return result
      endIf

    method split( bitmap:Bitmap )
      local grid_w = grid_size.x
      local grid_h = grid_size.y
      local remaining_rows    = grid_h
      local remaining_h = bitmap.height
      local y = 0
      forEach (j in 0.0..<grid_h)
        local x = 0
        local h = Int32(remaining_h / remaining_rows)
        local remaining_w = bitmap.width
        local remaining_columns = grid_w
        forEach (i in 0.0..<grid_w)
          local w = Int32(remaining_w / remaining_columns)
          local bounds = Box( x, y, w, h )
          output_command( Bitmap(bitmap,bounds).[filepath=bitmap.filepath] )
          x += w
          remaining_w -= w
          --remaining_columns
        endForEach
        y += h
        remaining_h -= h
        --remaining_rows
      endForEach

    method stack( bitmaps:Bitmap[] )->Bitmap
      println "stack"

      local max_width = 0
      max_width .= or_larger( (forEach in bitmaps).width )
      local max_height = 0
      max_height .= or_larger( (forEach in bitmaps).height )
      local cmd = CmdReshape( RealXY(max_width,max_height), &fit, &quiet )
      forEach (bitmap at i in bitmaps)
        bitmaps[i] = cmd( bitmap )
      endForEach

      local result = Bitmap( max_width, max_height ).[ filepath="ImageStack.png" ]
      forEach (bitmap in bitmaps)
        bitmap.blit( result, 0, 0, BitmapBlitFn.ALPHA )
      endForEach
      return result

    method error( message:String )
      Console.error.println "ERROR: " + message
      System.exit 1

    method read_channels( reader:Reader<<String>> )->(Int32,Int32)
      # Returns a channel index pair. Each value:
      #   b -> 0
      #   g -> 1
      #   r -> 2
      #   a -> 3
      #   0 -> 4
      #   1 -> 5
      if (reader.has_another)
        local param = reader.read
        if (param.count == 2)
          if local a_index = "bgra01".locate( param[0] )
            if local b_index = "bgra01".locate( param[1] )
              if (a_index >= 4 and b_index >= 4)
                error( ''At least one channel [a|r|g|b] should be specified.'' )
              endIf
              if (a_index >= 4 and b_index < 4) swapValues( a_index, b_index )
              return (a_index,b_index)
            endIf
          endIf
        endIf
      endIf

      error( ''Expected a pair of [a|r|g|b|0|1] (e.g. 'swap rb' or 'swap g0').'' )
      return (0,0)

    method read_color( reader:Reader<<String>> )->Color
      if (reader.has_another)
        local param = reader.read
        which (param.count)
          case 1  # V        -> 0xFFVVVVVV
            local v = param->Int32( &base=16 )
            v |= v:<<:4
            return Color( v, v, v )
          case 2  # Vv       -> 0xFFVvVvVv
            local v = param->Int32( &base=16 )
            return Color( v, v, v )
          case 3  # RGB      -> 0xFFRRGGBB
            local r = param[0].to_number( &base=16 )
            local g = param[1].to_number( &base=16 )
            local b = param[2].to_number( &base=16 )
            r |= r:<<:4
            g |= g:<<:4
            b |= b:<<:4
            return Color( r, g, b )
          case 4  # ARGB     -> 0xAARRGGBB
            local a = param[0].to_number( &base=16 )
            local r = param[1].to_number( &base=16 )
            local g = param[2].to_number( &base=16 )
            local b = param[3].to_number( &base=16 )
            a |= a:<<:4
            r |= r:<<:4
            g |= g:<<:4
            b |= b:<<:4
            return Color( r, g, b, a )
          case 6  # RRGGBB   -> 0xFFRRGGBB
            local r = param.substring(0,2)->Int32( &base=16 )
            local g = param.substring(2,2)->Int32( &base=16 )
            local b = param.substring(4,2)->Int32( &base=16 )
            return Color( r, g, b )
          case 8  # AARRGGBB -> 0xAARRGGBB
            local a = param.substring(0,2)->Int32( &base=16 )
            local r = param.substring(2,2)->Int32( &base=16 )
            local g = param.substring(4,2)->Int32( &base=16 )
            local b = param.substring(6,2)->Int32( &base=16 )
            return Color( r, g, b, a )
          case 11  # transparent -> 0x00000000
            if (param == "transparent") return Color(0)
        endWhich
      endIf

      error( ''Expected one of: [V,VV,RGB,ARGB,RRGGBB,AARRGGBB|transparent] (1/2/3/4/6/8 hex digits or 'transparent').'' )
      return Color(0)

    method read_wxh_wx_xh( cmd_name:String, reader:Reader<<String>> )->RealXY
      if (reader.has_another)
        local param = reader.read
        if (param.contains('x'))
          local parts = param.split( 'x' )
          if (parts[0].count)
            if (parts[1].count) return RealXY(parts[0]->Int32,parts[1]->Int32)
            else                return RealXY(parts[0]->Int32,0)
          else
            if (parts[1].count) return RealXY(0,parts[1]->Int32)
          endIf
        endIf
      endIf

      error( ''Expected 'WxH', 'Wx', or 'xH' after '$'.''(cmd_name) )
      return RealXY.zero

    method read_splice_args( reader:Reader<<String>> )->RealXY
      if (reader.has_another)
        local param = reader.read
        if (param == "h")
          return RealXY(0,1)
        elseIf (param == "v")
          return RealXY(1,0)
        elseIf (param.contains('x'))
          local parts = param.split( 'x' )
          if (parts[0].count)
            if (parts[1].count) return RealXY(parts[0]->Int32,parts[1]->Int32)
            else                return RealXY(parts[0]->Int32,0)
          else
            if (parts[1].count) return RealXY(0,parts[1]->Int32)
          endIf
        endIf
      endIf

      error( ''Expected 'h', 'v', 'WxH', 'Wx', or 'xH' after 'splice'.'' )
      return RealXY.zero

    method read_wxh( cmd_name:String, reader:Reader<<String>> )->RealXY
      if (reader.has_another)
        local param = reader.read
        if (param.contains('x'))
          local parts = param.split( 'x' )
          if (parts[0].count)
            if (parts[1].count) return RealXY(parts[0]->Int32,parts[1]->Int32)
          endIf
        endIf
      endIf

      error( ''Expected 'WxH' after '$'.''(cmd_name) )
      return RealXY.zero

    method read_anchor_args( reader:Reader<<String>> )->RealXY
      block
        if (reader.has_another)
          if (reader.peek.contains('x'))
            local parts = reader.read.split( 'x' )
            if (parts[0].count)
              if (parts[1].count) return RealXY(parts[0]->Real64,parts[1]->Real64)
            endIf
            escapeBlock
          endIf

          local x = 0.5
          local y = 0.5
          while (reader.has_another)
            which (reader.peek.to_lowercase)
              case "left":   reader.read; x = 0.0
              case "right":  reader.read; x = 1.0
              case "top":    reader.read; y = 0.0
              case "bottom": reader.read; y = 1.0
              case "center": reader.read; x = 0.5; y = 0.5
              others:        escapeWhile
            endWhich
          endWhile
          return RealXY(x,y)
        endIf
      endBlock

      error( ''Expected 'WxH' or one or more of [left,top,right,bottom,center] after 'anchor'.'' )
      return RealXY.zero

    method show_usage
      println  "ImageSize v$"(VERSION)
      println  "$ by Brom Bresenham" (DATE)
      println  "github.com/brombres/ImageSize"

      println @|
               |USAGE
               |  imagesize [input-patterns] [actions] [replace | output filepath]
               |
               |INPUT PATTERNS
               |  path/to/file, *.png, "**/*.jpg"
               |
               |ACTIONS
               |  anchor [HxV]
               |  anchor [left | right | top | bottom | center]
               |    Changes anchor for successive 'crop' and 'aspect' commands. 0.5x0.5/'center' by default.
               |      'anchor 0x0'     == 'anchor top left' == 'anchor left top'
               |      'anchor 0.5x0'   == 'anchor top'
               |      'anchor 0.5x0.5' == 'anchor center'
               |      'anchor 1x1'     == 'anchor bottom right'
               |
               |  as-alpha
               |    Converts each pixel to translucent white using the red color component as the alpha value.
               |
               |  aspect-fill WxH
               |  aspect-fit  WxH
               |    Crops to fill or fit an aspect ratio. 'aspect-fill 1024x768' equivalent to 'aspect-fill 4x3'.
               |    Uses current 'anchor' point or 'center' by default.
               |
               |  bg [V | VV | RGB | ARGB | RRGGBB | AARRGGBB | transparent]
               |    Sets the background fill color for successive expand (crop) operations as 1, 2, 3, 4, 6, or 8
               |    hex digits. Alpha is assumed to be FF (opaque) if not specified.
               |      bg ff0         - Set the background fill to yellow (0xFFffFF00).
               |      bg transparent - Set the background fill to transparent black (0x00000000).
               |
               |  create WxH
               |    Creates a new bitmap of the specified size using the current 'bg' color.
               |     bg 800f create 16x16 output HalfTransparentBlue-16x16.png
               |
               |  crop [WxH | Wx | xH]
               |    Crops/expands image using current 'anchor' point (default: 'center').
               |
               |  flip | hflip | vflip
               |    Flips (mirrors) an image horizontally or vertically. 'flip' == 'hflip'.
               |
               |  output <filepath>
               |    Designates output folder, filename, or format - use 'replace' instead of 'output' to replace
               |    original files with the modified versions. Output filepaths can contain the following
               |    placeholders which are replaced on save:
               |      {path}     - The original path without the filename.
               |      {filename} - The original filename+extension without the path.
               |      {name}     - The original filename without the path or extension.
               |      {ext}      - The extension of the original filename.
               |      {001}      - Sequence specification. '{001}' writes '001', '002', etc.
               |      {w}, {h}   - The width or height of the output image.
               |
               |  replace
               |    Indicates that the original file should be replaced with the result.
               |
               |  resize  [WxH | Wx | xH]
               |    'resize 1024x' on a 512x200 image would create a 1024x400 image, etc.
               |
               |  reshape WxH
               |    Performs an `aspect-fill` followed by a `resize`.
               |
               |  rotate [cw|ccw|180]
               |    Rotates the image 90 degrees clockwise, 90 degrees counter-clockwise, or 180 degrees.
               |
               |  splice [h | v | WxH | Wx | xH]
               |    Joins all images together into a single horizontal row (`h`), vertical column (`v`), or grid.
               |
               |  split WxH
               |    Splits apart each image into "WxH" individual images. "W" and "H" are column and row counts, not
               |    pixel sizes.
               |
               |  stack
               |    Combines all images by overlaying them from first/bottom to last/top using alpha blending.
               |
               |  swap [a|r|g|b|0|1][a|r|g|b|0|1]
               |    Swaps the color components for the specified pair. E.g. 'swap rb' swaps red and blue and
               |    'swap g0' replaces green with all zeros ('swap g1' replaces with all 1's AKA 0xFF).
               |
               |EXAMPLES
               |  # Print the image size of every JPG.
               |  imagesize *.jpg
               |
               |  # Create a 320x200 JPG thumbnail of each PNG image.
               |  imagesize *.png aspect-fill 4x3 resize 320x200 output "Thumbnails/{name}.jpg"
               |
               |  # A shorter equivalent to the above.
               |  imagesize *.png reshape 320x200 output "Thumbnails/{name}.jpg"
               |
               |  # Rotate an image 90 degrees counter-clockwise and replace the original.
               |  imagesize WrongOrientation.png rotate ccw replace
               |
               |  # Splice together a horizontal strip of images.
               |  imagesize *.png splice h
               |
               |  # Arrange images into a grid that's 2 rows high.
               |  imagesize *.png splice x2
               |
               |  # Split a 600x600 image containing 3x2 tiles into six 300x200 tiles "Tile-0.jpg".."Tile-5.jpg".
               |  imagesize Tiles.png split 3x2 output "Tile-{0}.jpg"
endClass

class Command [abstract]
  GLOBAL PROPERTIES
    anchor_x = 0.5
    anchor_y = 0.5
    bg       = Color.BLACK : Color

  METHODS
    method anchor->Anchor
      return Anchor( RealXY(anchor_x,anchor_y) )

    method call( bitmap:Bitmap )->Bitmap [abstract]
      noAction
endClass

class CmdPrintInfo : Command
  METHODS
    method call( bitmap:Bitmap )->Bitmap
      println "$ [$x$]" (bitmap.filepath,bitmap.width,bitmap.height)
      return bitmap
endClass

class CmdResize( new_size:RealXY, quiet=false:Logical ) : Command
  METHODS
    method call( bitmap:Bitmap )->Bitmap
      local new_size = new_size
      local w = bitmap.width
      local h = bitmap.height
      if (new_size.x == 0)     new_size = RealXY( w*(new_size.y/h), new_size.y )
      elseIf (new_size.y == 0) new_size = RealXY( new_size.x, h*(new_size.x/w) )
      w = new_size.x
      h = new_size.y
      if (not quiet) println "  resize [$x$]" (w,h)
      bitmap.resize( w, h )
      return bitmap
endClass

class CmdCrop( new_size:RealXY ) : Command
  METHODS
    method call( bitmap:Bitmap )->Bitmap
      local w = bitmap.width
      local h = bitmap.height
      if (new_size.x) w = new_size.x
      if (new_size.y) h = new_size.y
      println "  crop [$x$]" (w,h)
      bitmap.crop( w, h, anchor, bg )
      return bitmap
endClass

class CmdAspect( new_size:RealXY, fit:Logical ) : Command
  METHODS
    method call( bitmap:Bitmap )->Bitmap
      local w = bitmap.width
      local h = bitmap.height
      local adjusted_height = (w / new_size.x) * new_size.y : Int32
      local adjusted_width  = (h / new_size.y) * new_size.x : Int32

      println "  aspect-$ [$x$]" (which{fit:"fit"||"fill"},new_size.x->Int32,new_size.y->Int32)
      if (fit)
        if (adjusted_width < w) bitmap.crop( w, adjusted_height, anchor, bg )
        else                    bitmap.crop( adjusted_width, h,  anchor, bg )
      else
        if (adjusted_width < w) bitmap.crop( adjusted_width, h,  anchor, bg )
        else                    bitmap.crop( w, adjusted_height, anchor, bg )
      endIf

      return bitmap
endClass

class CmdReshape( new_size:RealXY, fit=false:Logical, quiet=false:Logical ) : Command
  METHODS
    method call( bitmap:Bitmap )->Bitmap
      block
        local w = bitmap.width
        local h = bitmap.height
        local adjusted_height = (w / new_size.x) * new_size.y : Int32
        local adjusted_width  = (h / new_size.y) * new_size.x : Int32

        if (not quiet) println "  reshape [$x$]" (new_size.x->Int32,new_size.y->Int32)
        if (fit)
          if (adjusted_width < w) bitmap.crop( w, adjusted_height, anchor, Color.BLACK )
          else                    bitmap.crop( adjusted_width, h,  anchor, Color.BLACK )
        else
          if (adjusted_width < w) bitmap.crop( adjusted_width, h,  anchor, Color.BLACK )
          else                    bitmap.crop( w, adjusted_height, anchor, Color.BLACK )
        endIf
      endBlock

      block
        local new_size = new_size
        local w = bitmap.width
        local h = bitmap.height
        if (new_size.x == 0)     new_size = RealXY( w*(new_size.y/h), new_size.y )
        elseIf (new_size.y == 0) new_size = RealXY( new_size.x, h*(new_size.x/w) )
        w = new_size.x
        h = new_size.y
        bitmap.resize( w, h )
      endBlock

      return bitmap
endClass


class CmdSetAnchor( xy:RealXY ) : Command
  METHODS
    method call( bitmap:Bitmap )->Bitmap
      println "  anchor $x$" (xy.x.format(".2"),xy.y.format(".2"))
      Command.anchor_x = xy.x
      Command.anchor_y = xy.y
      return bitmap
endClass

class CmdSetBG( color:Color ) : Command
  METHODS
    method call( bitmap:Bitmap )->Bitmap
      println "  bg $"(color)
      Command.bg = color
      return bitmap
endClass

class CmdAsAlpha : Command
  METHODS
    method call( bitmap:Bitmap )->Bitmap
      println "  as-alpha"

      forEach (color in rewriter=bitmap.pixels.rewriter)
        rewriter.write( Color(255,255,255,color.red_byte) )
      endForEach

      return bitmap
endClass

class CmdSwap( a:Int32, b:Int32 ) : Command
  METHODS
    method call( bitmap:Bitmap )->Bitmap
      println "  swap $$"("bgra01"[a],"bgra01"[b])

      if (b < 4)
        local a_shift = this.a * 8
        local b_shift = this.b * 8
        forEach (color in rewriter=bitmap.pixels.rewriter)
          local a = (color.argb :>>>: a_shift) & 0xFF
          local b = (color.argb :>>>: b_shift) & 0xFF
          local argb = color.argb & !(0xFF:<<:a_shift) & !(0xFF:<<:b_shift)
          argb |= (a :<<: b_shift) | (b :<<: a_shift)
          rewriter.write( Color(argb) )
        endForEach
      else
        # Replace color channel with all 0's or all 1's
        local a_shift = this.a * 8
        local b = which{ this.b==4:0 || 255 } :<<: a_shift
        forEach (color in rewriter=bitmap.pixels.rewriter)
          local argb = color.argb & !(0xFF:<<:a_shift)
          argb |= b
          rewriter.write( Color(argb) )
        endForEach
      endIf

      return bitmap
endClass

class CmdFlip( h=false:Logical, v=false:Logical ) : Command
  METHODS
    method call( bitmap:Bitmap )->Bitmap
      println "  $" (which{h:"hflip"||"vflip"})
      bitmap.flip( &=h, &=v )
      return bitmap
endClass

class CmdRotate90( cw=false:Logical, ccw=false:Logical ) : Command
  METHODS
    method call( bitmap:Bitmap )->Bitmap
      println "  rotate $" (which{cw:"cw"||"ccw"})
      bitmap.rotate_90( &=cw, &=ccw )
      return bitmap
endClass

class CmdRotate180 : Command
  METHODS
    method call( bitmap:Bitmap )->Bitmap
      println "  rotate 180"
      bitmap.rotate_180
      return bitmap
endClass

class CmdSave : Command
  GLOBAL PROPERTIES
    sequence_number = 0

  PROPERTIES
    pattern    : String
    seq        : String
    seq_format : String

  METHODS
    method init( pattern )
      seq = pattern.extract_string( "*{$(I)}*" )
      if (seq)
        sequence_number = seq->Int32
        seq_format = "0"+(seq.count)
        seq = "{$}" (seq)
      endIf

    method call( bitmap:Bitmap )->Bitmap
      local filepath = pattern
      assert bitmap.filepath

      if (File(filepath).is_folder)
        filepath = File(filepath) / File(bitmap.filepath).filename
      endIf

      if (seq)
        filepath .= replacing( seq, sequence_number.format(seq_format) )
        ++sequence_number
      endIf

      filepath .= replacing( "{filepath}", bitmap.filepath )
      filepath .= replacing( "{filename}", File(bitmap.filepath).filename )
      filepath .= replacing( "{name}",     File(bitmap.filepath).filename.before_last('.') )
      filepath .= replacing( "{ext}",      File(bitmap.filepath).extension )
      filepath .= replacing( "{path}",     File(bitmap.filepath).folder )
      filepath .= replacing( "{w}",        bitmap.width->String )
      filepath .= replacing( "{h}",        bitmap.height->String )

      println "  -> $ [$x$]" (filepath,bitmap.width,bitmap.height)

      if (filepath.to_lowercase.ends_with(".png"))
        File( filepath ).save( bitmap.to_png_bytes )
      else
        File( filepath ).save( bitmap.to_jpeg_bytes )
      endIf

      return bitmap
endClass

class CmdSaveReplace : Command
  METHODS
    method call( bitmap:Bitmap )->Bitmap
      local filepath = bitmap.filepath
      println "  -> $ [$x$]" (filepath,bitmap.width,bitmap.height)
      if (filepath.to_lowercase.ends_with(".png"))
        File( filepath ).save( bitmap.to_png_bytes )
      else
        File( filepath ).save( bitmap.to_jpeg_bytes )
      endIf
      return bitmap
endClass
